//各个组件所使用的基本配置。定义在此。便于对多版本进行统一修改更新
//keystore目录指向为：项目根目录/keystore
//local.properties里配置keystore的密码和alias
//password=xxx
//alias=xxx


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
    
ext{
   
    STORE_PASSWORD=properties.getProperty("password")
    KEY_ALIAS=properties.getProperty("alias")
    KEY_PASSWORD=STORE_PASSWORD

    ES={
         exclude group: 'com.android.support'
    }
 
}

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.1'

    defaultConfig {

        minSdkVersion 15
        targetSdkVersion 25
        versionCode 10
        versionName '1.0'

        //multiDexEnabled true
        resConfigs "zh"

        ndk {
            abiFilters "armeabi","x86"  //, "armeabi-v7a"//, "x86"//, "x86_64"
        }

        vectorDrawables.generatedDensities = ['xhdpi']
        vectorDrawables.useSupportLibrary = true 
        
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["moduleName": project.name]
            }
        }
    }

    signingConfigs {
        release {
            storeFile file(rootProject.rootDir.absolutePath+"/keystore")
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
            v2SigningEnabled false
        }


    }

    buildTypes {
        release {
            zipAlignEnabled true
            debuggable false    //发布应用之前要确保关闭debug属性,即false

            signingConfig signingConfigs.release
        }

        debug {
            zipAlignEnabled true
        }
    }
    
    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
    }

    dexOptions {
        javaMaxHeapSize "2g"
        preDexLibraries = false
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable "MissingTranslation", "RtlHardcoded", "RtlSymmetry"
    }
    
    //configurations.all {
    //    transitive = false
    //}
    
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (requested.name.startsWith("multidex")) {
                    details.useVersion '1.0.3'
                } else {
                    details.useVersion SUPPORT_VERSION
                }
            }else if(requested.group == 'com.android.support.constraint'){
                details.useVersion '1.1.2'
            }
        }
    }

    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation DEP.SUPPORT.appcompatV7
        implementation DEP.SUPPORT.constraint
        implementation DEP.SUPPORT.multidex
    }
    
}



